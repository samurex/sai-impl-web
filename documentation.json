{
    "pipes": [],
    "interfaces": [
        {
            "name": "AccessNeed",
            "id": "interface-AccessNeed-aa3e8e061b254ca3b70c716e15f26b92f70c0d5f2a021ee14a6b1d3c24937ce922f3c0c349282803e7d9771ddbe38793349177d80f1481d9ab6c89735f63111b",
            "file": "src/app/view-models/access-need.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {UniqueId} from \"./index\";\n\n\nexport interface AccessNeedGroup extends UniqueId {\n  title: string;\n  description: string;\n  required: boolean;\n  needs: AccessNeed[],\n}\n\nexport interface AccessNeed extends UniqueId {\n  title: string;\n  description: string;\n  required: boolean;\n  // TODO (angel) type the array\n  access: Array<string>;\n}\n",
            "properties": [
                {
                    "name": "access",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "UniqueId"
        },
        {
            "name": "AccessNeedGroup",
            "id": "interface-AccessNeedGroup-aa3e8e061b254ca3b70c716e15f26b92f70c0d5f2a021ee14a6b1d3c24937ce922f3c0c349282803e7d9771ddbe38793349177d80f1481d9ab6c89735f63111b",
            "file": "src/app/view-models/access-need.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {UniqueId} from \"./index\";\n\n\nexport interface AccessNeedGroup extends UniqueId {\n  title: string;\n  description: string;\n  required: boolean;\n  needs: AccessNeed[],\n}\n\nexport interface AccessNeed extends UniqueId {\n  title: string;\n  description: string;\n  required: boolean;\n  // TODO (angel) type the array\n  access: Array<string>;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "needs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccessNeed[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "UniqueId"
        },
        {
            "name": "Application",
            "id": "interface-Application-af4d7bc90c72a33753f468585f5f7f588e0fcf991e83d0a4aaab8527f19ff805867bc1c930b97edbb5868a561f58518fa155894b8195da548d9406ae8e3d3f98",
            "file": "src/app/view-models/application.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {UniqueId} from \"./index\";\nimport ParserJsonld from '@rdfjs/parser-jsonld';\nimport { Readable } from \"stream\";\n\nconst parser = new ParserJsonld();\n\n\nexport interface Application extends UniqueId {\n  name: string;\n  description: string;\n  author: string;\n  url: string;\n  thumbnail: string;\n  authorizationDate: string; // interop:registeredAt\n  lastUpdateDate: string;    // interop:updatedAt\n  accessNeedGroup: string    // interop:hasAccessNeedGroup\n\n}\n\nexport const buildApplication = (source: string): Application => {\n  const input = Readable.from(source);\n  const output = parser.import(input);\n\n  output.on('data', quad => {\n\n  });\n\n\n  return {} as Application;\n}\n\n// const name = (source: object): string => {\n//\n// }\n",
            "properties": [
                {
                    "name": "accessNeedGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "authorizationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "lastUpdateDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "thumbnail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "UniqueId"
        },
        {
            "name": "ApplicationProfileState",
            "id": "interface-ApplicationProfileState-4f17b8d4be30be1787c96c74172976ea88ee844988bfa9a10e704a568820e63b4d884f27c60c907508a21d3ee96e8fc04b2bd0e0eb2b63789f83a0ee48a02b35",
            "file": "src/app/reducers/application.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {createReducer, on} from '@ngrx/store';\nimport { NormalizedState } from \"./index\";\nimport {Application} from '../view-models';\nimport {DataActions} from \"../actions/application.actions\";\nimport {insertEntity} from \"./utils\";\n\nexport const APPLICATION_PROFILE_STATE_KEY = 'applications';\nexport interface ApplicationProfileState extends NormalizedState<Application> {}\n\nexport const initialState: ApplicationProfileState = {\n  byId: {},\n  allIds: [],\n};\n\nexport const applicationProfileReducer = createReducer(\n  initialState,\n  on(DataActions.applicationProfileReceived, (state, {profile}) => insertEntity(state, profile)),\n);\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "NormalizedState"
        },
        {
            "name": "CoreState",
            "id": "interface-CoreState-30dbf54b2b6074de97145c7ef8417b1ec247f74f4bb2707e0f974ca4458af02631b9ad793f03ae00e20799fbb354b8562902a36620d801ac08640c997261fb3d",
            "file": "src/app/reducers/core.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {createReducer, on} from \"@ngrx/store\";\nimport {CoreActions} from \"../actions\";\n\nexport const CORE_STATE_KEY = 'core';\n\nexport interface CoreState {\n  webId: string;\n  isLoggedIn: boolean;\n  isServerLoggedIn: boolean;\n}\n\nexport const initialState: CoreState = {\n  webId: '',\n  isLoggedIn: false,\n  isServerLoggedIn: false,\n}\n\nexport const coreReducer = createReducer(\n  initialState,\n  on(CoreActions.webIdReceived, (state, {webId}) => ({...state, webId})),\n  on(CoreActions.loginStatusChanged, (state, {loggedIn}) => ({...state, isLoggedIn: loggedIn})),\n  on(CoreActions.serverSessionReceived, (state, {loggedIn}) => ({...state, isServerLoggedIn: loggedIn}))\n)\n",
            "properties": [
                {
                    "name": "isLoggedIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isServerLoggedIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "webId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Description",
            "id": "interface-Description-9300b49820a59d79f6f219bc3a0ac3e7267fb30f5d1303016dcea346c6c177f324ae055cfeacd2e689426138347dfda2432db0c57e6242759bef999b26395d25",
            "file": "src/app/view-models/description.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {UniqueId} from './index';\n\nexport interface Description extends UniqueId {\n  label: string;\n  description?: string;\n  needId: string;\n};\n\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "needId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "UniqueId"
        },
        {
            "name": "DescriptionsState",
            "id": "interface-DescriptionsState-ef05118351e90b2e0bc10bf7eca8a457fc8d9c7716e3757fd118a248730c8b0358d86c44360f6e63fd305ab0ba9a4244dd7431a439b25fc2df876140b5d5a93a",
            "file": "src/app/reducers/descriptions.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {NormalizedState} from \"./index\";\nimport {createReducer, on} from \"@ngrx/store\";\nimport {Description} from \"../view-models\";\nimport {DescActions} from \"../actions/description.actions\";\nimport {insertEntities} from \"./utils\";\n\nexport const DESCRIPTIONS_STATE_KEY = 'descriptions';\n\nexport interface DescriptionsState extends NormalizedState<Description> {}\n\nexport const initialState: DescriptionsState = {\n  byId: {},\n  allIds: [],\n}\n\nexport const descriptionsReducer = createReducer(\n  initialState,\n  on(DescActions.descriptionsReceived, (state, {descriptions}) => insertEntities(state, descriptions)),\n)\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "NormalizedState"
        },
        {
            "name": "NormalizedState",
            "id": "interface-NormalizedState-492b918409a073ec3e66326a0c4dee110e3d9f8e674bf8ac6abc61d6735e2c7b20d0ec8cb13e7bb692f77d06171e3c95e4e7b95b17a590a972ebfcd4a501e2c5",
            "file": "src/app/reducers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ActionReducerMap,\n  MetaReducer\n} from '@ngrx/store';\nimport { ENV } from '../../environments/environment';\n\nimport {CoreState, coreReducer, CORE_STATE_KEY} from \"./core.reducer\";\nimport {\n  ApplicationProfileState,\n  applicationProfileReducer,\n  APPLICATION_PROFILE_STATE_KEY,\n} from './application.reducer';\n\nimport { UniqueId } from '../view-models';\nimport {DESCRIPTIONS_STATE_KEY, descriptionsReducer, DescriptionsState} from \"./descriptions.reducer\";\n\nexport interface NormalizedState<T extends UniqueId> {\n  byId: { [id: string]: T },\n  allIds: string[],\n}\n\n\nexport interface RootState {\n  [CORE_STATE_KEY]: CoreState,\n  [APPLICATION_PROFILE_STATE_KEY]: ApplicationProfileState,\n  [DESCRIPTIONS_STATE_KEY]: DescriptionsState,\n}\n\nexport const reducers: ActionReducerMap<RootState> = {\n  [CORE_STATE_KEY]: coreReducer,\n  [APPLICATION_PROFILE_STATE_KEY]: applicationProfileReducer,\n  [DESCRIPTIONS_STATE_KEY]: descriptionsReducer,\n};\n\nexport const metaReducers: MetaReducer<RootState>[] = !ENV.production ? [] : [];\n",
            "properties": [
                {
                    "name": "allIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "byId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RootState",
            "id": "interface-RootState-492b918409a073ec3e66326a0c4dee110e3d9f8e674bf8ac6abc61d6735e2c7b20d0ec8cb13e7bb692f77d06171e3c95e4e7b95b17a590a972ebfcd4a501e2c5",
            "file": "src/app/reducers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ActionReducerMap,\n  MetaReducer\n} from '@ngrx/store';\nimport { ENV } from '../../environments/environment';\n\nimport {CoreState, coreReducer, CORE_STATE_KEY} from \"./core.reducer\";\nimport {\n  ApplicationProfileState,\n  applicationProfileReducer,\n  APPLICATION_PROFILE_STATE_KEY,\n} from './application.reducer';\n\nimport { UniqueId } from '../view-models';\nimport {DESCRIPTIONS_STATE_KEY, descriptionsReducer, DescriptionsState} from \"./descriptions.reducer\";\n\nexport interface NormalizedState<T extends UniqueId> {\n  byId: { [id: string]: T },\n  allIds: string[],\n}\n\n\nexport interface RootState {\n  [CORE_STATE_KEY]: CoreState,\n  [APPLICATION_PROFILE_STATE_KEY]: ApplicationProfileState,\n  [DESCRIPTIONS_STATE_KEY]: DescriptionsState,\n}\n\nexport const reducers: ActionReducerMap<RootState> = {\n  [CORE_STATE_KEY]: coreReducer,\n  [APPLICATION_PROFILE_STATE_KEY]: applicationProfileReducer,\n  [DESCRIPTIONS_STATE_KEY]: descriptionsReducer,\n};\n\nexport const metaReducers: MetaReducer<RootState>[] = !ENV.production ? [] : [];\n",
            "properties": [
                {
                    "name": "APPLICATION_PROFILE_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationProfileState",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "CORE_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CoreState",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "DESCRIPTIONS_STATE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DescriptionsState",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UniqueId",
            "id": "interface-UniqueId-67448f8815f2e8345bb345c66164470eeec7aa910c5568ee6a0708adda66050c0f7e0b957dc31f2639fed7149c70ffe133dc97c0a96a149a698f61844006bf8b",
            "file": "src/app/view-models/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UniqueId {\n  id: string;\n};\n\nexport * from './application.model';\nexport * from './access-need.model';\nexport * from './description.model';\n\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApplicationProfileEffects",
            "id": "injectable-ApplicationProfileEffects-c6a058f1434a20069ff8c5998550bc6c91d45186511b704be3023beaada3de458adb4080834ed307abb225d8257d39d14289dd9b398c8dc8c35139b5825a26b9",
            "file": "src/app/effects/application.effects.ts",
            "properties": [
                {
                    "name": "loadApplicationProfiles$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(DataActions.applicationsPanelLoaded),\n    mergeMap(() => this.data.getApplicationProfiles()),\n    map(profiles => DataActions.applicationProfilesReceived({profiles})),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loadConsents$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(DataActions.applicationsPanelLoaded),\n    map(() => ({type: 'none'})),\n\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "receivedApplicationProfiles$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(DataActions.applicationProfilesReceived),\n    map(({profiles}) => profiles),\n    mergeMap(profiles => profiles),\n    map(profile => DataActions.applicationProfileReceived({profile})),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable} from \"@angular/core\";\nimport {Actions, createEffect, ofType} from \"@ngrx/effects\";\nimport {DataActions} from \"../actions/application.actions\";\nimport {map, mergeMap} from \"rxjs\";\nimport {DataService} from \"../services/data.service\";\nimport {CoreActions} from \"../actions\";\nimport {LoginService} from \"../services/login.service\";\n\n\n@Injectable()\nexport class ApplicationProfileEffects {\n  constructor(\n    private actions$: Actions,\n    private data: DataService,\n    private login: LoginService,\n  ) {}\n\n  loadApplicationProfiles$ = createEffect(() => this.actions$.pipe(\n    ofType(DataActions.applicationsPanelLoaded),\n    mergeMap(() => this.data.getApplicationProfiles()),\n    map(profiles => DataActions.applicationProfilesReceived({profiles})),\n  ))\n\n  loadConsents$ = createEffect(() => this.actions$.pipe(\n    ofType(DataActions.applicationsPanelLoaded),\n    map(() => ({type: 'none'})),\n\n  ))\n\n  receivedApplicationProfiles$ = createEffect(() => this.actions$.pipe(\n    ofType(DataActions.applicationProfilesReceived),\n    map(({profiles}) => profiles),\n    mergeMap(profiles => profiles),\n    map(profile => DataActions.applicationProfileReceived({profile})),\n  ))\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "login",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "login",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CoreEffects",
            "id": "injectable-CoreEffects-2b8d726807824f263b4d31208a551ded29b10e9a21402f418afd06167c131f63d0edde758baf973ea22edc7fcc4702d924fc874c5484d4e29a8ce722b50b4bba",
            "file": "src/app/effects/core.effects.ts",
            "properties": [
                {
                    "name": "login$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.loginRequested),\n    tap(({idP}) => this.id.login(idP)),\n    map(() => CoreActions.loginInitiated()),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "receiveLogin$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.webIdReceived),\n    map(({webId}) => CoreActions.loginStatusChanged({loggedIn: Boolean(webId)})),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "serverSessionRequested$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.serverSessionRequested),\n    mergeMap(() => this.id.checkServerSession$()\n      .pipe(\n        map(loggedIn => CoreActions.serverSessionReceived({loggedIn})),\n        catchError(() => EMPTY),\n      )),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {Actions, createEffect, ofType} from \"@ngrx/effects\";\nimport {catchError, EMPTY, map, tap} from \"rxjs\";\nimport {LoginService} from \"../services/login.service\";\nimport {CoreActions} from \"../actions\";\nimport {mergeMap} from \"rxjs/operators\";\n\n@Injectable()\nexport class CoreEffects {\n\n  constructor(\n    private actions$: Actions,\n    private id: LoginService,\n  ) {}\n\n  login$ = createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.loginRequested),\n    tap(({idP}) => this.id.login(idP)),\n    map(() => CoreActions.loginInitiated()),\n  ))\n\n  receiveLogin$ = createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.webIdReceived),\n    map(({webId}) => CoreActions.loginStatusChanged({loggedIn: Boolean(webId)})),\n  ))\n\n  serverSessionRequested$ = createEffect(() => this.actions$.pipe(\n    ofType(CoreActions.serverSessionRequested),\n    mergeMap(() => this.id.checkServerSession$()\n      .pipe(\n        map(loggedIn => CoreActions.serverSessionReceived({loggedIn})),\n        catchError(() => EMPTY),\n      )),\n  ))\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DataService",
            "id": "injectable-DataService-1ea818f5d67cd6d39ca16c636aa0c668394173037dccb0749b803eb4083cde04a2528f0ca1948deefbe123afe2626327ba6c3e4152ec0b0decf4e03f03fecc2f",
            "file": "src/app/services/data.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getApplicationProfiles",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Application[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDescription",
                    "args": [
                        {
                            "name": "applicationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "applicationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {Application} from '../view-models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(\n    private http: HttpClient,\n  ) {}\n\n\n  getApplicationProfiles(): Observable<Application[]> {\n    return this.http.get<Application[]>('/api/applications', { responseType: 'json'});\n  }\n\n  // TODO (angel) typing\n  getDescription(applicationId: string, lang: string): Observable<[]> {\n    return this.http.get<[]>(`/api/descriptions/${encodeURI(applicationId)}/${lang}`, {responseType: 'json'});\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DescriptionEffects",
            "id": "injectable-DescriptionEffects-229cec95a6b90003fe50b143d58a8bea3f38e322bee3dfbe545391c866f3e66979a390ede3ccaece6fcc390fcee2a2d1066036988d45761504567ecfaf8ecdfd",
            "file": "src/app/effects/description.effect.ts",
            "properties": [
                {
                    "name": "loadApplicationDescriptions$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n    ofType(DescActions.descriptionsNeeded),\n    mergeMap(props => this.data.getDescription(props.applicationId, props.lang).pipe(\n      map(descriptions => DescActions.descriptionsReceived({descriptions})),\n      catchError(() => EMPTY),\n    )),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {DataService} from \"../services/data.service\";\nimport {Actions, createEffect, ofType} from \"@ngrx/effects\";\nimport { DescActions } from \"../actions/description.actions\";\nimport {catchError, EMPTY, map, mergeMap} from \"rxjs\";\n\n@Injectable()\nexport class DescriptionEffects {\n  constructor(\n    private actions$: Actions,\n    private data: DataService,\n  ) {}\n\n  loadApplicationDescriptions$ = createEffect(() => this.actions$.pipe(\n    ofType(DescActions.descriptionsNeeded),\n    mergeMap(props => this.data.getDescription(props.applicationId, props.lang).pipe(\n      map(descriptions => DescActions.descriptionsReceived({descriptions})),\n      catchError(() => EMPTY),\n    )),\n  ))\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-ed6309cae2e57d917a577af2467b95c4a2200212f55c15b791fc9b166593ebc39d24ea37148ffdf3833e4d1c6bb71cfb8aea6be7ec66adb7d88aaf9c7af12fbc",
            "file": "src/app/services/login.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "checkServerSession",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "checkServerSession$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "oidcIssuer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "oidcIssuer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ENV} from \"../../environments/environment\";\nimport {login} from \"@inrupt/solid-client-authn-browser\";\nimport {SolidClient} from \"../utils/solid-client\";\nimport {from, Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(\n    private solidClient: SolidClient,\n  ) {}\n\n  async login(oidcIssuer?: string) {\n\n    // TODO reject if no oidcIssuer is provided\n    if (!oidcIssuer) oidcIssuer = ENV.DEFAULT_IDP;\n\n\n    await login({\n      clientId: ENV.OIDC_CLIENT_ID,\n      oidcIssuer,\n      redirectUrl: `${ENV.BASE_URL}/redirect`,\n    });\n  }\n\n  async checkServerSession(): Promise<boolean> {\n    type ResponseShape = { found: boolean };\n\n\n    return this.solidClient.fetch(`${ENV.SRV_BASE}/session`)\n      .then(r => r.json())\n      .then((r: ResponseShape) => r.found);\n  }\n\n  checkServerSession$(): Observable<boolean> {\n    return from(this.checkServerSession());\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SolidClient",
            "id": "injectable-SolidClient-39dcad024ef5603f5d6061f96f15154d32e42ceb9514b5ec59c839304cb23d7c08ee1971c6ee329423560123567c67425fbb0ed286e24d0be8caeb9ace944e41",
            "file": "src/app/utils/solid-client.ts",
            "properties": [
                {
                    "name": "_fetch",
                    "defaultValue": "getDefaultSession().fetch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fetch",
                    "args": [
                        {
                            "name": "url",
                            "type": "RequestInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "init",
                            "type": "RequestInit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Response>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "RequestInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "init",
                            "type": "RequestInit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetch$",
                    "args": [
                        {
                            "name": "url",
                            "type": "RequestInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "init",
                            "type": "RequestInit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Response>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "RequestInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "init",
                            "type": "RequestInit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {from, Observable} from \"rxjs\";\nimport {getDefaultSession} from \"@inrupt/solid-client-authn-browser\";\nimport {mergeMap} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SolidClient {\n\n  private _fetch = getDefaultSession().fetch;\n\n  public fetch$(url: RequestInfo, init?: RequestInit): Observable<Response> {\n    return from(this._fetch(url, init));\n  }\n\n  public fetch(url: RequestInfo, init?: RequestInit): Promise<Response> {\n    return this._fetch(url, init);\n  }\n}\n\n\nexport function unwrapJson<T = any>(): (response$: Observable<Response>) => Observable<T> {\n  return (response$: Observable<Response>): Observable<T> => {\n    return response$.pipe(mergeMap(r => r.json()));\n  };\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-4062ff5bca8e729e56084d5b4ae6bcff44f49b889bca5922c9881d5fa9c563bcbaa64ddc470d1cedff4660d412ab3029415553162d017b69cb0edab148eb6f1e",
            "file": "src/app/guards/auth.guard.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tryToRecoverSession",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {from, map, Observable} from 'rxjs';\nimport {getDefaultSession, onSessionRestore} from '@inrupt/solid-client-authn-browser';\nimport {Store} from \"@ngrx/store\";\nimport {loggedInStatus} from \"../selectors\";\nimport {mergeMap} from \"rxjs/operators\";\nimport {CoreActions} from \"../actions\";\n\n\nonSessionRestore((currentUrl: string) => {\n  console.log('ON SESSION RESTORE', currentUrl);\n})\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private router: Router,\n    private store: Store,\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n    return from(this.tryToRecoverSession()).pipe(\n      mergeMap(() => this.store.select(loggedInStatus)),\n      map(status => status || this.router.parseUrl('login'))\n    );\n  }\n\n  private async tryToRecoverSession(): Promise<void> {\n    const session = getDefaultSession();\n\n    if (session && session.info && session.info.isLoggedIn) {\n      return;\n    } else {\n      const info = await session.handleIncomingRedirect({restorePreviousSession: true});\n\n      if (info && info.isLoggedIn) {\n        this.store.dispatch(CoreActions.loginStatusChanged({loggedIn: true}));\n      }\n    }\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-45279eaf0d7c2be83957ab5b980486e4d635f569cf94e2f45aee80d052d0e3e950d0926e21e1db0ff14e41b1707d850c96f1dc1e472c0db5c1d13ec16d9f7f16",
            "file": "src/app/interceptors/auth.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse\n} from '@angular/common/http';\nimport { Observable, tap} from 'rxjs';\nimport { Router } from \"@angular/router\";\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(\n    private router: Router,\n  ) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      tap((event: HttpEvent<any>) => {\n        // Ignore the outgoing requests\n        if (event.type === 0) return;\n\n        event = event as HttpResponse<unknown>;\n        console.log(event.url);\n\n        if (event instanceof HttpResponse && event.status === 401) {\n\n          // If we're already in the login page then do not redirect again to login\n          if (window.location.pathname === '/login') {\n            console.log('[Auth Interceptor] Already in login page, not redirecting')\n            return;\n          }\n\n          // TODO (angel) better logging\n          console.log('[Auth Interceptor] Received 401 response - navigating to /login')\n          this.router.navigate(['/login']);\n        }\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-2f9bf101a9caa6499c9fbe03969587d15689fa5fee3d9cafbe47fea0a7e4fd71ad41ae0b693b9a144abdd1fbb1b0c52193175c252ff0f052d6d4d986b0a1691b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isServerLoggedIn",
                    "defaultValue": "this.store.select(serverLoggedInStatus)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "defaultValue": "'sai-web-app'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "webId",
                    "defaultValue": "this.store.select(webId)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "serverLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {Store} from \"@ngrx/store\";\nimport {serverLoggedInStatus, webId} from \"./selectors\";\nimport {CoreActions} from \"./actions\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit{\n  title = 'sai-web-app';\n  webId = this.store.select(webId);\n  isServerLoggedIn = this.store.select(serverLoggedInStatus);\n\n  constructor(\n    private store: Store,\n  ) {}\n\n  ngOnInit() {}\n\n  serverLogin() {\n    this.store.dispatch(CoreActions.serverSessionRequested());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<sai-navbar\n  [webId]=\"(webId | async)!\"\n  [isServerLoggedIn]=\"(isServerLoggedIn | async)!\"\n  (serverLogin)=\"serverLogin()\"></sai-navbar>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ConsentPanelComponent",
            "id": "component-ConsentPanelComponent-29dcb532395076be1b596bed99a0e83961c7dda64ddb12490b17506be57aef834b8a6af5a72e5b46e7f63ce0f6bc837c953f0b3d0ab390d63828a1e2bc7641e7",
            "file": "src/app/views/consent-panel/consent-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-consent-panel",
            "styleUrls": [
                "./consent-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./consent-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "AccessNeedGroup[]",
                    "decorators": []
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Application",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "openAuthorUrl",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "noop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport type {Application, AccessNeedGroup} from '../../view-models';\n\n@Component({\n  selector: 'sai-consent-panel',\n  templateUrl: './consent-panel.component.html',\n  styleUrls: ['./consent-panel.component.scss']\n})\nexport class ConsentPanelComponent implements OnInit {\n\n  @Input()\n  profile!: Application;\n\n  @Input()\n  groups!: AccessNeedGroup[];\n\n  @Output()\n  openAuthorUrl = new EventEmitter<void>();\n  // @Output()\n  // change = new EventEmitter<AccessNeedGroup>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  noop() {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\n  box-sizing: border-box;\n  font-family: sans-serif;\n}\n\nmat-expansion-panel-header {\n  height: auto !important;\n  padding-bottom: 10px;\n  padding-top: 10px;\n\n  img {\n    height: 75px;\n    width: 75px;\n    border-radius: 50%;\n    box-shadow: 0 0 6px 0 rgba(0, 0, 0, 0.19);\n    border: solid 2px #FFF;\n  }\n\n}\n\n.content {\n  display: flex;\n  width: 100%;\n  padding: 5px;\n  gap: 10px;\n}\n\n.text-content {\n  display: flex;\n  width: 100%;\n  flex-flow: column nowrap;\n  justify-content: space-evenly;\n\n  h3 {\n    color: #131415;\n  }\n\n  p {\n    font-size: 0.85rem;\n    color: #768692;\n  }\n\n  .date-line {\n    display: inline-flex;\n    justify-content: space-between;\n  }\n\n  h3, p {\n    margin: 0;\n  }\n}\n\na {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 10px;\n}\n\n\n.access-need {\n  display: flex;\n  justify-content: space-between;\n  padding: 15px 60px;\n}\n\n.access-label-container {\n  display: flex;\n  flex-flow: row nowrap;\n  gap: 10px;\n  justify-content: center;\n\n  .label {\n    text-transform: capitalize;\n    padding: 5px 20px;\n    border-radius: 10px;\n    align-self: center;\n  }\n\n  button {\n    background: rgba(0, 0, 0, 0.05);\n  }\n}\n\n.access-need.even {\n  background-color: #fafafa;\n}\n\n:host ::ng-deep .mat-expansion-panel-body {\n  padding: 0;\n}\n\n.actions {\n  padding: 0;\n  background-color: rgba(218, 41, 28, 0.3);\n  button {\n    color: #da291c;\n    width: 100%;\n  }\n}\n\n//@include breakpoint(mobile){\n@media (max-width: 767px) and (orientation: portrait) {\n  .hide-mobile {\n    display: none;\n  }\n  .main-header {\n    padding: 0;\n  }\n  span.mat-expansion-indicator {\n    margin-right: 5px;\n  }\n  .date-line {\n    flex-flow: column;\n  }\n  .access-need {\n    padding: 15px 10px;\n    flex-flow: column;\n  }\n  .access-label-container {\n    margin-top: 2%;\n  }\n}\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;  /* Preferred icon size */\n  display: inline-block;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n\n  /* Support for all WebKit browsers. */\n  -webkit-font-smoothing: antialiased;\n  /* Support for Safari and Chrome. */\n  text-rendering: optimizeLegibility;\n\n  /* Support for Firefox. */\n  -moz-osx-font-smoothing: grayscale;\n\n  /* Support for IE. */\n  font-feature-settings: 'liga';\n}\n\n",
                    "styleUrl": "./consent-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<mat-accordion>\n<!--  TODO (angel) remove expanded property, for testing only -->\n  <mat-expansion-panel [expanded]=\"true\">\n    <mat-expansion-panel-header class=\"main-header\">\n      <mat-panel-title>\n        <div class=\"content\">\n          <img src=\"{{profile.thumbnail}}\">\n          <div class=\"text-content\">\n            <h3>{{profile.name}}</h3>\n            <p>{{profile.description}}</p>\n            <p class=\"date-line\">\n              <span>{{profile.author}}</span>\n              <span>Registered on: {{profile.authorizationDate | date}}</span>\n            </p>\n          </div>\n        </div>\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <div class=\"panel-content\">\n<!--      TODO (angel) remove expanded, for testing only -->\n      <mat-expansion-panel *ngFor=\"let group of groups\" expanded=\"true\">\n        <mat-expansion-panel-header>\n          <div class=\"text-content\">\n            <h3>{{group.title}}</h3>\n            <p>{{group.description}}</p>\n          </div>\n        </mat-expansion-panel-header>\n        <div class=\"access-need-panel\">\n          <div class=\"access-need\" *ngFor=\"let need of group.needs; let odd=odd; let even=even\" [ngClass]=\"{odd: odd, even: even}\">\n            <div class=\"text-content\">\n              <h3>{{need.title}}</h3>\n              <p>{{need.description}}</p>\n            </div>\n            <div class=\"access-label-container\">\n              <button mat-button *ngFor=\"let level of need.access\" class=\"label\">\n                <mat-icon aria-hidden=\"false\">\n                  {{level === 'read' ? 'visibility' : 'edit'}}\n                </mat-icon>\n                {{level}}\n              </button>\n            </div>\n          </div>\n        </div>\n      </mat-expansion-panel>\n    </div>\n    <mat-card class=\"actions\">\n      <button mat-button>SAVE</button>\n    </mat-card>\n  </mat-expansion-panel>\n</mat-accordion>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-1ad83594d8c32a1fc2e8d2cd76312dbbc09ba7ab459a8a69bce87e8941089e148c4045423fd19cd5415e09782a7c3b446a32a34bb0b7703d127e3c65497f94a7",
            "file": "src/app/components/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "applications",
                    "defaultValue": "this.store.select(selectApplicationProfiles)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isServerLoggedIn$",
                    "defaultValue": "this.store.select(serverLoggedInStatus)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "latestMessage",
                    "defaultValue": "new BehaviorSubject<unknown>(JSON.stringify({}))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkServerSession",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Store} from \"@ngrx/store\";\nimport {selectApplicationProfiles} from \"../../selectors/application.selectors\";\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {serverLoggedInStatus} from \"../../selectors\";\nimport {SolidClient} from \"../../utils/solid-client\";\nimport {CoreActions} from \"../../actions\";\nimport {ENV} from \"../../../environments/environment\";\n\n@Component({\n  selector: 'sai-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  applications = this.store.select(selectApplicationProfiles);\n  isServerLoggedIn$ = this.store.select(serverLoggedInStatus);\n\n  public latestMessage: Observable<unknown> = new BehaviorSubject<unknown>(JSON.stringify({}));\n\n  constructor(\n    private solidClient: SolidClient,\n    private store: Store,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(CoreActions.requestWebId());\n  }\n\n  public checkServerSession(): void {\n    this.store.dispatch(CoreActions.serverSessionRequested());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\n  box-sizing: border-box;\n}\n\nsai-consent-panel {\n  display: inline-block;\n  min-width: 480px;\n  width: 720px;\n}\n\n.container {\n  display: flex;\n  justify-content: center;\n  padding: 50px 0;\n}\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div class=\"container\">\n  <sai-consent-panel *ngFor=\"let profile of (this.applications | async)\" [profile]=\"profile\"></sai-consent-panel>\n</div>\n\n\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-0cd94fbc94a83702e45bf987cb3b3f9074d69cd27e6ca2e4fbac0dc5b5047bd4dc3a9ce8a77f6bd9ab7ae3e6ca8e49b34bed529ca0da0fa428fec544a0324870",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-0e587e7f101d8e966e0b3715cde7a0d50afeafe1dd05f2d68e2cfa0c70363b669ecadf840627cc45691e9014c9bcef0bc71673196d5ee4711df943866050baf9",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "defaultValue": "new FormGroup({\n    issuer: new FormControl(''),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {Store} from \"@ngrx/store\";\nimport {CoreActions} from \"../../actions\";\n\n@Component({\n  selector: 'sai-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm = new FormGroup({\n    issuer: new FormControl(''),\n  })\n\n  constructor(\n    private store: Store,\n  ) { }\n\n  ngOnInit(): void {}\n\n  onSubmit() {\n    this.store.dispatch(CoreActions.loginRequested({idP: this.loginForm.get('issuer')!.value}));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\nmat-card {\n  max-width: 400px;\n  margin: 2em auto;\n  text-align: center;\n}\n\nmat-form-field {\n  display: block;\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<mat-card>\n  <mat-card-content>\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n      <h2>Log In</h2>\n      <mat-form-field class=\"full-width-input\">\n        <input matInput placeholder=\"http://localhost:3000\" formControlName=\"issuer\">\n        <mat-error>Please provide a valid Solid Provider</mat-error>\n      </mat-form-field>\n      <button mat-raised-button color=\"primary\">Login</button>\n    </form>\n  </mat-card-content>\n</mat-card>\n\n\n\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-a024599159875e79598ff01e7eb8f6843d1e3efc2fc4d53074150e570eec4bc43fef57a8e81e791bc52f405575204504b8a2177dd9b920b30eb7d934f76d3bca",
            "file": "src/app/views/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-navbar",
            "styleUrls": [
                "./navbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isServerLoggedIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "webId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "serverLogin",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "loginServer",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {ENV} from \"../../../environments/environment\";\nimport {SolidClient} from \"../../utils/solid-client\";\n\n@Component({\n  selector: 'sai-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  @Input() isServerLoggedIn!: boolean;\n  @Input() webId!: string | null;\n\n  @Output() serverLogin = new EventEmitter();\n  constructor(\n    private solidClient: SolidClient,\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  public async loginServer(): Promise<void> {\n    type ResponseShape = {\n      redirectUrl: string,\n    }\n\n    const options = {\n      method: 'POST',\n      body: JSON.stringify({idp: 'http://localhost:3000/'}),\n    } as RequestInit;\n\n    const redir = await this.solidClient.fetch(ENV.SRV_BASE + '/login', options)\n      .then(r => r.json())\n      .then((r: ResponseShape) => r.redirectUrl)\n\n    if (redir) window.location.href = redir;\n    else {\n      console.warn('Bad login response');\n    }\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\nh6 {\n  font-size: 0.7rem;\n  margin-left: 15px;\n}\n\np {\n  font-size: 0.7rem;\n  margin: 0 auto;\n}\n\n.spacer {\n  flex: 1 1 auto;\n}\n",
                    "styleUrl": "./navbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "solidClient",
                        "type": "SolidClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar color=\"primary\">\n  <div>\n    <h3>Solid Authorization Agent</h3>\n    <h6 *ngIf=\"webId\">{{webId}}</h6>\n  </div>\n  <span class=\"spacer\"></span>\n  <span *ngIf=\"isServerLoggedIn; else serverLoggedOut\"><mat-icon>dns</mat-icon></span>\n  <span class=\"spacer\"></span>\n  <button mat-raised-button (click)=\"loginServer()\">Connect To Server</button>\n</mat-toolbar>\n\n<ng-template #serverLoggedOut>\n  <mat-icon (click)=\"this.serverLogin.emit($event)\">warning</mat-icon>\n  <p>Server Session Not Found</p>\n</ng-template>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-432c9ae0bcf6e2e1f46701f7565a67376cb10145b7d049c5fe930cf8f075c6e02e24151589750b18cbaa8266f7c61393b95c4d833fbfd71ee228904aa014349f",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RedirectHandlerComponent",
            "id": "component-RedirectHandlerComponent-605f8be626f4bb5bd8af9af141a158d23c483491e29b88ab99b3d5eef61620676b2415ce7ae7e65b217ff99de8f6d385c354d2e19fa0344c820c46cb5f86215d",
            "file": "src/app/components/redirect-handler/redirect-handler.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sai-redirect-handler",
            "styleUrls": [
                "./redirect-handler.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./redirect-handler.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {handleIncomingRedirect} from \"@inrupt/solid-client-authn-browser\";\nimport {Router} from \"@angular/router\";\nimport {Store} from \"@ngrx/store\";\nimport {CoreActions} from \"../../actions\";\nimport {firstValueFrom} from \"rxjs\";\nimport {loggedInStatus} from \"../../selectors\";\n\n@Component({\n  selector: 'sai-redirect-handler',\n  templateUrl: './redirect-handler.component.html',\n  styleUrls: ['./redirect-handler.component.scss']\n})\nexport class RedirectHandlerComponent implements OnInit {\n\n  constructor(\n    private router: Router,\n    private store: Store,\n  ) { }\n\n  async ngOnInit(): Promise<void> {\n\n    const isLoggedIn = await firstValueFrom(this.store.select(loggedInStatus));\n\n    try {\n      if (!isLoggedIn) {\n        console.log('Restoring from redirect handler');\n        await handleIncomingRedirect()\n          .then((info) => {\n            if (info && info.isLoggedIn) {\n              console.log(info);\n              this.store.dispatch(CoreActions.webIdReceived({webId: info.webId!}));\n              this.store.dispatch(CoreActions.loginStatusChanged({loggedIn: true}))\n              this.router.navigate(['/']).then(() => console.log('Login successful'));\n            } else {\n              this.router.navigate(['/login']).then(() => console.log('Login failed'));\n            }\n          });\n\n      }\n      // Hit the server to check for a server-side session, or create one.\n    } catch (e) {\n      // TODO handle\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./redirect-handler.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<!-- TODO show a spinner or something with a ...loading... effect -->\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-49521e5c8d8769428e4be134d5b3a71d7a9c0681f1b4978259b53955133420ff4d6b5a4ba7b95f1c54c2e943d548fe651313dcc79867b731862e775f8b908f6f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {HTTP_INTERCEPTORS, HttpClientModule} from \"@angular/common/http\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\nimport {NavbarComponent} from \"./views/navbar/navbar.component\";\nimport {LoginComponent} from \"./components/login/login.component\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { ConsentPanelComponent } from './views/consent-panel/consent-panel.component';\nimport {MatExpansionModule} from \"@angular/material/expansion\";\nimport { StoreModule } from '@ngrx/store';\nimport { reducers, metaReducers } from './reducers';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { ENV } from '../environments/environment';\nimport { EffectsModule } from '@ngrx/effects';\nimport {AuthInterceptor} from \"./interceptors/auth.interceptor\";\nimport {Effects} from \"./effects\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport { FormsModule } from \"@angular/forms\";\nimport { RedirectHandlerComponent } from './components/redirect-handler/redirect-handler.component';\nimport {SolidClient} from \"./utils/solid-client\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    LoginComponent,\n    DashboardComponent,\n    ConsentPanelComponent,\n    RedirectHandlerComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatCardModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatExpansionModule,\n    FormsModule,\n    StoreModule.forRoot(reducers, {\n      metaReducers\n    }),\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: ENV.production }),\n    EffectsModule.forRoot(Effects),\n  ],\n  providers: [\n    {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true},\n    SolidClient,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptor"
                        },
                        {
                            "name": "SolidClient"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ConsentPanelComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "NavbarComponent"
                        },
                        {
                            "name": "RedirectHandlerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-5f4156c4c899b44e384dc765b19ff4e0e39cc8d3a645ed3cee7627796c3a7747dd2555cd93c7ed4de387da7bf9935da88bc5a339ff36e795f80f236079a6175d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {LoginComponent} from \"./components/login/login.component\";\nimport {DashboardComponent} from \"./components/dashboard/dashboard.component\";\nimport {AuthGuard} from \"./guards/auth.guard.service\";\nimport {RedirectHandlerComponent} from \"./components/redirect-handler/redirect-handler.component\";\n\nconst routes: Routes = [\n  {\n    path: '', component: DashboardComponent, canActivate: [AuthGuard],\n  },\n  {\n    path: 'login', component: LoginComponent,\n  },\n  {\n    path: 'redirect', component: RedirectHandlerComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DemoMaterialModule",
            "id": "module-DemoMaterialModule-5d159e157028bae8cca731a5e2be0f627b4ef55cc3c6c4b963eb0ba1a187119d6b663cab152c37deb07cdb74338a3b46fa51aa5d7c93ec90494896897096af73",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/material-module.ts",
            "methods": [],
            "sourceCode": "import {DragDropModule} from '@angular/cdk/drag-drop';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {NgModule} from '@angular/core';\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatBadgeModule } from \"@angular/material/badge\";\nimport { MatBottomSheetModule } from \"@angular/material/bottom-sheet\";\nimport { MatButtonToggleModule } from \"@angular/material/button-toggle\";\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\nimport { MatChipsModule } from \"@angular/material/chips\";\nimport { MatStepperModule } from \"@angular/material/stepper\";\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { MatDividerModule } from \"@angular/material/divider\";\nimport {MatExpansionModule} from \"@angular/material/expansion\";\nimport {MatGridListModule} from \"@angular/material/grid-list\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatListModule} from \"@angular/material/list\";\nimport {MatMenuModule} from \"@angular/material/menu\";\nimport {MatNativeDateModule, MatRippleModule} from \"@angular/material/core\";\nimport {MatPaginatorModule} from \"@angular/material/paginator\";\nimport {MatProgressBarModule} from \"@angular/material/progress-bar\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {MatRadioModule} from \"@angular/material/radio\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {MatSidenavModule} from \"@angular/material/sidenav\";\nimport {MatSliderModule} from \"@angular/material/slider\";\nimport {MatSlideToggleModule} from \"@angular/material/slide-toggle\";\nimport {MatSnackBarModule} from \"@angular/material/snack-bar\";\nimport {MatSortModule} from \"@angular/material/sort\";\nimport {MatTableModule} from \"@angular/material/table\";\nimport {MatTabsModule} from \"@angular/material/tabs\";\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\nimport {MatTooltipModule} from \"@angular/material/tooltip\";\nimport {MatTreeModule} from \"@angular/material/tree\";\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\n\n@NgModule({\n  exports: [\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    ScrollingModule,\n    BrowserAnimationsModule,\n  ]\n})\nexport class DemoMaterialModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "APPLICATION_PROFILE_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/application.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'applications'"
            },
            {
                "name": "applicationProfileReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Adding Single Application Profile',\n  props<{profile: Application}>(),\n)"
            },
            {
                "name": "applicationProfileReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/application.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(DataActions.applicationProfileReceived, (state, {profile}) => insertEntity(state, profile)),\n)"
            },
            {
                "name": "applicationProfilesReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Application Profiles Received',\n  props<{profiles: Application[]}>(),\n)"
            },
            {
                "name": "applicationsPanelLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Application Profiles Requested'\n)"
            },
            {
                "name": "buildApplication",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/view-models/application.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(source: string): Application => {\n  const input = Readable.from(source);\n  const output = parser.import(input);\n\n  output.on('data', quad => {\n\n  });\n\n\n  return {} as Application;\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CORE_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'core'"
            },
            {
                "name": "CoreActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  loginRequested,\n  loginInitiated,\n  requestWebId,\n  webIdReceived,\n  loginStatusChanged,\n  serverSessionRequested,\n  serverSessionReceived,\n  requestName,\n}"
            },
            {
                "name": "coreReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(CoreActions.webIdReceived, (state, {webId}) => ({...state, webId})),\n  on(CoreActions.loginStatusChanged, (state, {loggedIn}) => ({...state, isLoggedIn: loggedIn})),\n  on(CoreActions.serverSessionReceived, (state, {loggedIn}) => ({...state, isServerLoggedIn: loggedIn}))\n)"
            },
            {
                "name": "DataActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/application.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  applicationsPanelLoaded,\n  applicationProfilesReceived,\n  applicationProfileReceived,\n}"
            },
            {
                "name": "DescActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/description.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  descriptionsNeeded,\n  descriptionsReceived,\n}"
            },
            {
                "name": "DESCRIPTIONS_STATE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/descriptions.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'descriptions'"
            },
            {
                "name": "descriptionsNeeded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/description.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[DESCRIPTIONS] Descriptions needed for application',\n  props<{applicationId: string, lang: string}>(),\n)"
            },
            {
                "name": "descriptionsReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/description.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[DESCRIPTIONS] Descriptions received for application',\n  // TODO (angel) typing\n  props<{descriptions: []}>(),\n)"
            },
            {
                "name": "descriptionsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/descriptions.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(DescActions.descriptionsReceived, (state, {descriptions}) => insertEntities(state, descriptions)),\n)"
            },
            {
                "name": "Effects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/effects/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ApplicationProfileEffects,\n  CoreEffects,\n  DescriptionEffects,\n]"
            },
            {
                "name": "ENV",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  BASE_URL: 'http://localhost:4200',\n  API_URL: 'http://localhost:4200/api',\n  AUTH_URL: 'http://localhost:4200/auth',\n  DEFAULT_IDP: 'http://localhost:3000',\n}"
            },
            {
                "name": "ENV",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  OIDC_CLIENT_ID: 'https://localhost:4200/assets/id',\n  BASE_URL: 'https://localhost:4200',\n  SRV_BASE: 'http://localhost:4000',\n  API_URL: 'https://localhost:4200/api',\n  DEFAULT_IDP: 'http://localhost:3000/',\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/application.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationProfileState",
                "defaultValue": "{\n  byId: {},\n  allIds: [],\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/core.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CoreState",
                "defaultValue": "{\n  webId: '',\n  isLoggedIn: false,\n  isServerLoggedIn: false,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/descriptions.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DescriptionsState",
                "defaultValue": "{\n  byId: {},\n  allIds: [],\n}"
            },
            {
                "name": "insertEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, entities: T[]) => {\n  for (const entity of entities) state = insertEntity(state, entity);\n  return state;\n}"
            },
            {
                "name": "insertEntity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, entry: T): NormalizedState<T> => {\n  const byId = {...state.byId, [entry.id]: entry};\n  const allIds = [...state.allIds, entry.id];\n\n  return {byId, allIds}\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/navbar/navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loggedInStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/selectors/ core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.isLoggedIn,\n)"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/navbar/navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loginInitiated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Login Initiated'\n)",
                "rawdescription": "Marks that the navigations has been handled off to the user IDP",
                "description": "<p>Marks that the navigations has been handled off to the user IDP</p>\n"
            },
            {
                "name": "loginRequested",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Login Requested',\n  props<{idP: string}>(),\n)"
            },
            {
                "name": "loginStatusChanged",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Login Status Changed',\n  props<{loggedIn: boolean}>(),\n)"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!ENV.production ? [] : []"
            },
            {
                "name": "Normal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/consent-panel/consent-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NormalNew",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/consent-panel/consent-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "parser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/view-models/application.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new ParserJsonld()"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<RootState>",
                "defaultValue": "{\n  [CORE_STATE_KEY]: coreReducer,\n  [APPLICATION_PROFILE_STATE_KEY]: applicationProfileReducer,\n  [DESCRIPTIONS_STATE_KEY]: descriptionsReducer,\n}"
            },
            {
                "name": "removeEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, ids: string[]) => {\n  for (const id of ids) state = removeEntity(state, id);\n  return state;\n}"
            },
            {
                "name": "removeEntity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, id: string): NormalizedState<T> => {\n\n  if (!state.allIds.includes(id)) return state;\n\n  const byId = {...state.byId};\n  const allIds = [...state.allIds].filter(_id => _id != id);\n\n  delete byId[id];\n  return {byId, allIds}\n}"
            },
            {
                "name": "requestName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Request Name',\n)"
            },
            {
                "name": "requestWebId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Request WebId',\n)"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectApplicationProfiles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/selectors/application.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectApplicationProfilesFeature,\n  state => ([...Object.values(state.byId)]),\n)"
            },
            {
                "name": "selectApplicationProfilesFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/selectors/application.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ApplicationProfileState>(APPLICATION_PROFILE_STATE_KEY)"
            },
            {
                "name": "selectCore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/selectors/ core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<CoreState>(CORE_STATE_KEY)"
            },
            {
                "name": "serverLoggedInStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/selectors/ core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.isServerLoggedIn,\n)"
            },
            {
                "name": "serverSessionReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Server session status received',\n  props<{loggedIn: boolean}>(),\n)"
            },
            {
                "name": "serverSessionRequested",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] Server session status requested',\n)"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/consent-panel/consent-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({props: args})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/views/navbar/navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({props: args})"
            },
            {
                "name": "webId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/selectors/ core.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectCore,\n  core => core.webId,\n)"
            },
            {
                "name": "webIdReceived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/core.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[CORE] WebId Received',\n  props<{webId: string}>(),\n)"
            }
        ],
        "functions": [
            {
                "name": "unwrapJson",
                "file": "src/app/utils/solid-client.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Observable<T>"
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/reducers/application.reducer.ts": [
                {
                    "name": "APPLICATION_PROFILE_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/application.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'applications'"
                },
                {
                    "name": "applicationProfileReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/application.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(DataActions.applicationProfileReceived, (state, {profile}) => insertEntity(state, profile)),\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/application.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationProfileState",
                    "defaultValue": "{\n  byId: {},\n  allIds: [],\n}"
                }
            ],
            "src/app/actions/application.actions.ts": [
                {
                    "name": "applicationProfileReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Adding Single Application Profile',\n  props<{profile: Application}>(),\n)"
                },
                {
                    "name": "applicationProfilesReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Application Profiles Received',\n  props<{profiles: Application[]}>(),\n)"
                },
                {
                    "name": "applicationsPanelLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[APPLICATION PROFILES] Application Profiles Requested'\n)"
                },
                {
                    "name": "DataActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/application.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  applicationsPanelLoaded,\n  applicationProfilesReceived,\n  applicationProfileReceived,\n}"
                }
            ],
            "src/app/view-models/application.model.ts": [
                {
                    "name": "buildApplication",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/view-models/application.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(source: string): Application => {\n  const input = Readable.from(source);\n  const output = parser.import(input);\n\n  output.on('data', quad => {\n\n  });\n\n\n  return {} as Application;\n}"
                },
                {
                    "name": "parser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/view-models/application.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new ParserJsonld()"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/reducers/core.reducer.ts": [
                {
                    "name": "CORE_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'core'"
                },
                {
                    "name": "coreReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(CoreActions.webIdReceived, (state, {webId}) => ({...state, webId})),\n  on(CoreActions.loginStatusChanged, (state, {loggedIn}) => ({...state, isLoggedIn: loggedIn})),\n  on(CoreActions.serverSessionReceived, (state, {loggedIn}) => ({...state, isServerLoggedIn: loggedIn}))\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/core.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CoreState",
                    "defaultValue": "{\n  webId: '',\n  isLoggedIn: false,\n  isServerLoggedIn: false,\n}"
                }
            ],
            "src/app/actions/core.actions.ts": [
                {
                    "name": "CoreActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  loginRequested,\n  loginInitiated,\n  requestWebId,\n  webIdReceived,\n  loginStatusChanged,\n  serverSessionRequested,\n  serverSessionReceived,\n  requestName,\n}"
                },
                {
                    "name": "loginInitiated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Login Initiated'\n)",
                    "rawdescription": "Marks that the navigations has been handled off to the user IDP",
                    "description": "<p>Marks that the navigations has been handled off to the user IDP</p>\n"
                },
                {
                    "name": "loginRequested",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Login Requested',\n  props<{idP: string}>(),\n)"
                },
                {
                    "name": "loginStatusChanged",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Login Status Changed',\n  props<{loggedIn: boolean}>(),\n)"
                },
                {
                    "name": "requestName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Request Name',\n)"
                },
                {
                    "name": "requestWebId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Request WebId',\n)"
                },
                {
                    "name": "serverSessionReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Server session status received',\n  props<{loggedIn: boolean}>(),\n)"
                },
                {
                    "name": "serverSessionRequested",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] Server session status requested',\n)"
                },
                {
                    "name": "webIdReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/core.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CORE] WebId Received',\n  props<{webId: string}>(),\n)"
                }
            ],
            "src/app/actions/description.actions.ts": [
                {
                    "name": "DescActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/description.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  descriptionsNeeded,\n  descriptionsReceived,\n}"
                },
                {
                    "name": "descriptionsNeeded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/description.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[DESCRIPTIONS] Descriptions needed for application',\n  props<{applicationId: string, lang: string}>(),\n)"
                },
                {
                    "name": "descriptionsReceived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/description.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[DESCRIPTIONS] Descriptions received for application',\n  // TODO (angel) typing\n  props<{descriptions: []}>(),\n)"
                }
            ],
            "src/app/reducers/descriptions.reducer.ts": [
                {
                    "name": "DESCRIPTIONS_STATE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/descriptions.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'descriptions'"
                },
                {
                    "name": "descriptionsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/descriptions.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(DescActions.descriptionsReceived, (state, {descriptions}) => insertEntities(state, descriptions)),\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/descriptions.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DescriptionsState",
                    "defaultValue": "{\n  byId: {},\n  allIds: [],\n}"
                }
            ],
            "src/app/effects/index.ts": [
                {
                    "name": "Effects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/effects/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ApplicationProfileEffects,\n  CoreEffects,\n  DescriptionEffects,\n]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "ENV",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  BASE_URL: 'http://localhost:4200',\n  API_URL: 'http://localhost:4200/api',\n  AUTH_URL: 'http://localhost:4200/auth',\n  DEFAULT_IDP: 'http://localhost:3000',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "ENV",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  OIDC_CLIENT_ID: 'https://localhost:4200/assets/id',\n  BASE_URL: 'https://localhost:4200',\n  SRV_BASE: 'http://localhost:4000',\n  API_URL: 'https://localhost:4200/api',\n  DEFAULT_IDP: 'http://localhost:3000/',\n}"
                }
            ],
            "src/app/reducers/utils.ts": [
                {
                    "name": "insertEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, entities: T[]) => {\n  for (const entity of entities) state = insertEntity(state, entity);\n  return state;\n}"
                },
                {
                    "name": "insertEntity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, entry: T): NormalizedState<T> => {\n  const byId = {...state.byId, [entry.id]: entry};\n  const allIds = [...state.allIds, entry.id];\n\n  return {byId, allIds}\n}"
                },
                {
                    "name": "removeEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, ids: string[]) => {\n  for (const id of ids) state = removeEntity(state, id);\n  return state;\n}"
                },
                {
                    "name": "removeEntity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T extends UniqueId>(state: NormalizedState<T>, id: string): NormalizedState<T> => {\n\n  if (!state.allIds.includes(id)) return state;\n\n  const byId = {...state.byId};\n  const allIds = [...state.allIds].filter(_id => _id != id);\n\n  delete byId[id];\n  return {byId, allIds}\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/views/navbar/navbar.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/navbar/navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/navbar/navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/navbar/navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({props: args})"
                }
            ],
            "src/app/selectors/ core.selectors.ts": [
                {
                    "name": "loggedInStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/selectors/ core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.isLoggedIn,\n)"
                },
                {
                    "name": "selectCore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/selectors/ core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<CoreState>(CORE_STATE_KEY)"
                },
                {
                    "name": "serverLoggedInStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/selectors/ core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.isServerLoggedIn,\n)"
                },
                {
                    "name": "webId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/selectors/ core.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCore,\n  core => core.webId,\n)"
                }
            ],
            "src/app/reducers/index.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!ENV.production ? [] : []"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<RootState>",
                    "defaultValue": "{\n  [CORE_STATE_KEY]: coreReducer,\n  [APPLICATION_PROFILE_STATE_KEY]: applicationProfileReducer,\n  [DESCRIPTIONS_STATE_KEY]: descriptionsReducer,\n}"
                }
            ],
            "src/app/views/consent-panel/consent-panel.stories.ts": [
                {
                    "name": "Normal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/consent-panel/consent-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NormalNew",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/consent-panel/consent-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/views/consent-panel/consent-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({props: args})"
                }
            ],
            "src/app/selectors/application.selectors.ts": [
                {
                    "name": "selectApplicationProfiles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/selectors/application.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectApplicationProfilesFeature,\n  state => ([...Object.values(state.byId)]),\n)"
                },
                {
                    "name": "selectApplicationProfilesFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/selectors/application.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ApplicationProfileState>(APPLICATION_PROFILE_STATE_KEY)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/utils/solid-client.ts": [
                {
                    "name": "unwrapJson",
                    "file": "src/app/utils/solid-client.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Observable<T>"
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "DashboardComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "redirect",
                        "component": "RedirectHandlerComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationProfileReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationProfilesReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationsPanelLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/application.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DataActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CoreActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginInitiated",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginRequested",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginStatusChanged",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "requestName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "requestWebId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverSessionReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverSessionRequested",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/core.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "webIdReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/description.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DescActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/description.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "descriptionsNeeded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/description.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "descriptionsReceived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/redirect-handler/redirect-handler.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RedirectHandlerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/effects/application.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApplicationProfileEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/effects/core.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CoreEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/effects/description.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DescriptionEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/effects/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Effects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/auth.guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interceptors/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/application.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApplicationProfileState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/application.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APPLICATION_PROFILE_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/application.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationProfileReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/application.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/core.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CoreState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CORE_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coreReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/core.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/descriptions.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DescriptionsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/descriptions.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DESCRIPTIONS_STATE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/descriptions.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "descriptionsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/descriptions.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NormalizedState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RootState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "insertEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "insertEntity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeEntity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/selectors/ core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loggedInStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/selectors/ core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/selectors/ core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverLoggedInStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/selectors/ core.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "webId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/selectors/application.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectApplicationProfiles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/selectors/application.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectApplicationProfilesFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/solid-client.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SolidClient",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/solid-client.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "unwrapJson",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/view-models/access-need.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccessNeed",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/view-models/access-need.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccessNeedGroup",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/view-models/application.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Application",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/view-models/application.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buildApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/view-models/application.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/view-models/description.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Description",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/view-models/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UniqueId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/views/consent-panel/consent-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConsentPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/views/consent-panel/consent-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Normal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/consent-panel/consent-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NormalNew",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/consent-panel/consent-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/views/navbar/navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/navbar/navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/views/navbar/navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ENV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ENV",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}